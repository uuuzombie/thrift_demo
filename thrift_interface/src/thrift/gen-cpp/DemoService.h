/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DemoService_H
#define DemoService_H

#include <thrift/TDispatchProcessor.h>
#include "service_types.h"

namespace sky { namespace demo { namespace service {

class DemoServiceIf {
 public:
  virtual ~DemoServiceIf() {}
  virtual void getUserList(std::vector< ::sky::demo::common::User> & _return, const  ::sky::demo::common::UserType::type userType) = 0;
};

class DemoServiceIfFactory {
 public:
  typedef DemoServiceIf Handler;

  virtual ~DemoServiceIfFactory() {}

  virtual DemoServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DemoServiceIf* /* handler */) = 0;
};

class DemoServiceIfSingletonFactory : virtual public DemoServiceIfFactory {
 public:
  DemoServiceIfSingletonFactory(const boost::shared_ptr<DemoServiceIf>& iface) : iface_(iface) {}
  virtual ~DemoServiceIfSingletonFactory() {}

  virtual DemoServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DemoServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DemoServiceIf> iface_;
};

class DemoServiceNull : virtual public DemoServiceIf {
 public:
  virtual ~DemoServiceNull() {}
  void getUserList(std::vector< ::sky::demo::common::User> & /* _return */, const  ::sky::demo::common::UserType::type /* userType */) {
    return;
  }
};

typedef struct _DemoService_getUserList_args__isset {
  _DemoService_getUserList_args__isset() : userType(false) {}
  bool userType :1;
} _DemoService_getUserList_args__isset;

class DemoService_getUserList_args {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  DemoService_getUserList_args(const DemoService_getUserList_args&);
  DemoService_getUserList_args& operator=(const DemoService_getUserList_args&);
  DemoService_getUserList_args() : userType(( ::sky::demo::common::UserType::type)0) {
  }

  virtual ~DemoService_getUserList_args() throw();
   ::sky::demo::common::UserType::type userType;

  _DemoService_getUserList_args__isset __isset;

  void __set_userType(const  ::sky::demo::common::UserType::type val);

  bool operator == (const DemoService_getUserList_args & rhs) const
  {
    if (!(userType == rhs.userType))
      return false;
    return true;
  }
  bool operator != (const DemoService_getUserList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DemoService_getUserList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DemoService_getUserList_args& obj);
};


class DemoService_getUserList_pargs {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};


  virtual ~DemoService_getUserList_pargs() throw();
  const  ::sky::demo::common::UserType::type* userType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DemoService_getUserList_pargs& obj);
};

typedef struct _DemoService_getUserList_result__isset {
  _DemoService_getUserList_result__isset() : success(false) {}
  bool success :1;
} _DemoService_getUserList_result__isset;

class DemoService_getUserList_result {
 public:

  static const char* ascii_fingerprint; // = "758383DE30A7D73EF0E52C7D456C1847";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x83,0x83,0xDE,0x30,0xA7,0xD7,0x3E,0xF0,0xE5,0x2C,0x7D,0x45,0x6C,0x18,0x47};

  DemoService_getUserList_result(const DemoService_getUserList_result&);
  DemoService_getUserList_result& operator=(const DemoService_getUserList_result&);
  DemoService_getUserList_result() {
  }

  virtual ~DemoService_getUserList_result() throw();
  std::vector< ::sky::demo::common::User>  success;

  _DemoService_getUserList_result__isset __isset;

  void __set_success(const std::vector< ::sky::demo::common::User> & val);

  bool operator == (const DemoService_getUserList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DemoService_getUserList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DemoService_getUserList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DemoService_getUserList_result& obj);
};

typedef struct _DemoService_getUserList_presult__isset {
  _DemoService_getUserList_presult__isset() : success(false) {}
  bool success :1;
} _DemoService_getUserList_presult__isset;

class DemoService_getUserList_presult {
 public:

  static const char* ascii_fingerprint; // = "758383DE30A7D73EF0E52C7D456C1847";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x83,0x83,0xDE,0x30,0xA7,0xD7,0x3E,0xF0,0xE5,0x2C,0x7D,0x45,0x6C,0x18,0x47};


  virtual ~DemoService_getUserList_presult() throw();
  std::vector< ::sky::demo::common::User> * success;

  _DemoService_getUserList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const DemoService_getUserList_presult& obj);
};

class DemoServiceClient : virtual public DemoServiceIf {
 public:
  DemoServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DemoServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getUserList(std::vector< ::sky::demo::common::User> & _return, const  ::sky::demo::common::UserType::type userType);
  void send_getUserList(const  ::sky::demo::common::UserType::type userType);
  void recv_getUserList(std::vector< ::sky::demo::common::User> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DemoServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DemoServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DemoServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getUserList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DemoServiceProcessor(boost::shared_ptr<DemoServiceIf> iface) :
    iface_(iface) {
    processMap_["getUserList"] = &DemoServiceProcessor::process_getUserList;
  }

  virtual ~DemoServiceProcessor() {}
};

class DemoServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DemoServiceProcessorFactory(const ::boost::shared_ptr< DemoServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DemoServiceIfFactory > handlerFactory_;
};

class DemoServiceMultiface : virtual public DemoServiceIf {
 public:
  DemoServiceMultiface(std::vector<boost::shared_ptr<DemoServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DemoServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DemoServiceIf> > ifaces_;
  DemoServiceMultiface() {}
  void add(boost::shared_ptr<DemoServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getUserList(std::vector< ::sky::demo::common::User> & _return, const  ::sky::demo::common::UserType::type userType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserList(_return, userType);
    }
    ifaces_[i]->getUserList(_return, userType);
    return;
  }

};

}}} // namespace

#endif
