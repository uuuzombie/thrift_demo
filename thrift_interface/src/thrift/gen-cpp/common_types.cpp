/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "common_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace sky { namespace demo { namespace common {

int _kUserTypeValues[] = {
  UserType::ADMIN,
  UserType::AUDIT,
  UserType::COMMON
};
const char* _kUserTypeNames[] = {
  "ADMIN",
  "AUDIT",
  "COMMON"
};
const std::map<int, const char*> _UserType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kUserTypeValues, _kUserTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDataSourceTypeValues[] = {
  DataSourceType::MYSQL,
  DataSourceType::POSTGRESQL,
  DataSourceType::ORACLE
};
const char* _kDataSourceTypeNames[] = {
  "MYSQL",
  "POSTGRESQL",
  "ORACLE"
};
const std::map<int, const char*> _DataSourceType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kDataSourceTypeValues, _kDataSourceTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


User::~User() throw() {
}


void User::__set_name(const std::string& val) {
  this->name = val;
}

void User::__set_userType(const UserType::type val) {
  this->userType = val;
}

void User::__set_age(const int16_t val) {
  this->age = val;
}

void User::__set_sex(const bool val) {
  this->sex = val;
}

void User::__set_salary(const double val) {
  this->salary = val;
}

const char* User::ascii_fingerprint = "985018D98B077DE2FEC116A244E14617";
const uint8_t User::binary_fingerprint[16] = {0x98,0x50,0x18,0xD9,0x8B,0x07,0x7D,0xE2,0xFE,0xC1,0x16,0xA2,0x44,0xE1,0x46,0x17};

uint32_t User::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->userType = (UserType::type)ecast0;
          this->__isset.userType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->age);
          this->__isset.age = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->sex);
          this->__isset.sex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->salary);
          this->__isset.salary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("User");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->userType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("age", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->age);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sex", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->sex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("salary", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->salary);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(User &a, User &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.userType, b.userType);
  swap(a.age, b.age);
  swap(a.sex, b.sex);
  swap(a.salary, b.salary);
  swap(a.__isset, b.__isset);
}

User::User(const User& other1) {
  name = other1.name;
  userType = other1.userType;
  age = other1.age;
  sex = other1.sex;
  salary = other1.salary;
  __isset = other1.__isset;
}
User& User::operator=(const User& other2) {
  name = other2.name;
  userType = other2.userType;
  age = other2.age;
  sex = other2.sex;
  salary = other2.salary;
  __isset = other2.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const User& obj) {
  using apache::thrift::to_string;
  out << "User(";
  out << "name=" << to_string(obj.name);
  out << ", " << "userType=" << to_string(obj.userType);
  out << ", " << "age=" << to_string(obj.age);
  out << ", " << "sex=" << to_string(obj.sex);
  out << ", " << "salary=" << to_string(obj.salary);
  out << ")";
  return out;
}

}}} // namespace
