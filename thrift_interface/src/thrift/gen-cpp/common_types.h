/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef common_TYPES_H
#define common_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace sky { namespace demo { namespace common {

struct UserType {
  enum type {
    ADMIN = 1,
    AUDIT = 2,
    COMMON = 3
  };
};

extern const std::map<int, const char*> _UserType_VALUES_TO_NAMES;

struct DataSourceType {
  enum type {
    MYSQL = 1,
    POSTGRESQL = 2,
    ORACLE = 3
  };
};

extern const std::map<int, const char*> _DataSourceType_VALUES_TO_NAMES;

class User;

typedef struct _User__isset {
  _User__isset() : name(false), userType(false), age(true), sex(false), salary(false) {}
  bool name :1;
  bool userType :1;
  bool age :1;
  bool sex :1;
  bool salary :1;
} _User__isset;

class User {
 public:

  static const char* ascii_fingerprint; // = "985018D98B077DE2FEC116A244E14617";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x50,0x18,0xD9,0x8B,0x07,0x7D,0xE2,0xFE,0xC1,0x16,0xA2,0x44,0xE1,0x46,0x17};

  User(const User&);
  User& operator=(const User&);
  User() : name(), userType((UserType::type)0), age(0), sex(0), salary(0) {
  }

  virtual ~User() throw();
  std::string name;
  UserType::type userType;
  int16_t age;
  bool sex;
  double salary;

  _User__isset __isset;

  void __set_name(const std::string& val);

  void __set_userType(const UserType::type val);

  void __set_age(const int16_t val);

  void __set_sex(const bool val);

  void __set_salary(const double val);

  bool operator == (const User & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(userType == rhs.userType))
      return false;
    if (!(age == rhs.age))
      return false;
    if (!(sex == rhs.sex))
      return false;
    if (!(salary == rhs.salary))
      return false;
    return true;
  }
  bool operator != (const User &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const User& obj);
};

void swap(User &a, User &b);

}}} // namespace

#endif
